{"version":3,"sources":["components/TrelloForm.js","actions/index.js","components/TrelloCard.js","actions/cardsAction.js","components/TrelloActionButton.js","actions/listsActions.js","components/TrelloList.js","App.js","serviceWorker.js","modules/listReducer.js","modules/index.js","index.js"],"names":["Container","styled","div","StyledTextArea","Textarea","StyledCard","Card","ButtonContainer","StyledIcon","Icon","TrelloForm","list","text","onChange","closeForm","children","placeholder","autoFocus","value","e","onMouseDown","CONSTANTS","ADD_CARD","ADD_LIST","DRAG_HAPPENED","EDIT_CARD","CardContainer","EditButton","connect","id","index","listID","console","log","useState","cardText","setText","edit","setEdit","disptach","useDispatch","handleChange","target","saveCard","preventDefault","type","payload","editCard","onClick","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","CardContent","Typography","gutterBottom","styles","display","alignItems","cursor","borderRadius","height","width","paddingLeft","RenderForm","handleaddList","handleaddCard","buttonTitle","style","overflow","minHeight","minWidth","padding","resize","outline","border","Button","variant","color","backgroundColor","marginLeft","RenderAddButton","buttonText","buttonTextOpacity","buttonTextBackground","buttonTextColor","opacity","background","props","dispatch","setValue","open","setOpen","addCard","title","container","marginRight","TrelloList","cards","droppableId","droppableProps","map","card","key","GlobalStyle","createGlobalStyle","ListContainer","state","lists","onDragEnd","result","destination","source","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","sort","direction","Boolean","window","location","hostname","match","cardID","initialState","rootReducer","combineReducers","action","newList","newCard","newState","find","update","newStat","splice","listStart","listEnd","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"szBAOA,IAAMA,EAAYC,IAAOC,IAAV,KAKTC,EAAiBF,YAAOG,IAAPH,CAAH,KAOdI,EAAaJ,YAAOK,IAAPL,CAAH,KAKVM,EAAkBN,IAAOC,IAAV,KAMfM,EAAaP,YAAOQ,IAAPR,CAAH,KAuBDS,MAnBf,YAAyE,IAAnDC,EAAkD,EAAlDA,KAAkD,IAA5CC,YAA4C,MAArC,GAAqC,EAAjCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,SACpDC,EAAcL,EAAO,aAAe,aAC1C,OACE,kBAACX,EAAD,KACE,kBAACK,EAAD,KACE,kBAACF,EAAD,CACEa,YAAaA,EACbC,WAAS,EACTC,MAAON,EACPC,SAAU,SAAAM,GACRN,EAASM,OAIf,kBAACZ,EAAD,KAAkBQ,GAClB,kBAACP,EAAD,CAAYY,YAAaN,M,OC9ClBO,EAAY,CACvBC,SAAU,WACVC,SAAU,WACVC,cAAe,gBACfC,UAAW,a,saCIb,IAAMC,EAAgBzB,IAAOC,IAAV,KAMbyB,EAAa1B,YAAOQ,IAAPR,CAAH,IAMZyB,GA4DWE,qBAnDf,YAAkD,IAA5BhB,EAA2B,EAA3BA,KAAMiB,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACrCC,QAAQC,IAAIJ,GADmC,MAGnBK,mBAAStB,GAHU,mBAGxCuB,EAHwC,KAG9BC,EAH8B,OAIvBF,oBAAS,GAJc,mBAIxCG,EAJwC,KAIlCC,EAJkC,KAKzCC,EAAWC,cAEXC,EAAe,SAAAtB,GACnBiB,EAAQjB,EAAEuB,OAAOxB,QAEbJ,EAAY,SAAAK,GAChBmB,GAAQ,IAEJK,EAAW,SAAAxB,GACfA,EAAEyB,iBACFL,ECxCoB,SAACV,EAAIE,EAAQI,GACnC,MAAO,CACLU,KAAMxB,EAAUI,UAChBqB,QAAS,CAAEjB,KAAIE,SAAQI,aDqCdY,CAASlB,EAAIE,EAAQI,IAE9BG,GAAQ,IAgCV,OAAOD,EA3BH,kBAAC,EAAD,CAAYzB,KAAMuB,EAAUtB,SAAU4B,EAAc3B,UAAWA,GAC7D,yBAAKkC,QAASL,GAAd,iBAOF,kBAAC,IAAD,CAAWM,YAAaC,OAAOrB,GAAKC,MAAOA,IACxC,SAAAqB,GAAQ,OACP,kBAACzB,EAAD,eACE0B,IAAKD,EAASE,UACVF,EAASG,eACTH,EAASI,iBAEb,kBAACjD,EAAA,EAAD,KACE,kBAACqB,EAAD,CAAYP,YAAa,kBAAMkB,GAASD,KAAxC,QACA,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,GAAE9C,KAG7BuC,EAASnC,mB,iBEnEhB2C,EACgB,CAClBC,QAAS,OACTC,WAAY,SACZC,OAAQ,UACRC,aAAc,EACdC,OAAQ,GACRC,MAAO,IACPC,YAAa,IAIjB,SAASC,EAAT,GAOI,IANFxD,EAMC,EANDA,KACAqC,EAKC,EALDA,QACAnC,EAIC,EAJDA,SACAK,EAGC,EAHDA,MACAkD,EAEC,EAFDA,cACAC,EACC,EADDA,cAEMrD,EAAcL,EAAO,4DAAiB,sDACtC2D,EAAc3D,EAAO,kCAAW,4BACtC,OACE,6BACE,kBAACL,EAAA,EAAD,CACEiE,MAAO,CACLC,SAAU,UACVC,UAAW,GACXC,SAAU,IACVC,QAAS,gBAGX,kBAAC,IAAD,CACE3D,YAAaA,EACbC,WAAS,EACT+B,QAASA,EACTnC,SAAUA,EACVK,MAAOA,EACPqD,MAAO,CACLK,OAAQ,OACRX,MAAO,OACPY,QAAS,OACTC,OAAQ,WAId,6BACE,kBAACC,EAAA,EAAD,CACE3D,YAAaT,EAAOyD,EAAgBC,EACpCrB,QAASA,EACTgC,QAAQ,YACRT,MAAO,CAAEU,MAAO,QAASC,gBAAiB,YAEzCZ,GAEH,kBAAC7D,EAAA,EAAD,CAAMuC,QAASA,EAASuB,MAAO,CAAEY,WAAY,EAAGrB,OAAQ,YAAxD,WAQR,SAASsB,EAAT,GAA6C,IAAlBzE,EAAiB,EAAjBA,KAAMqC,EAAW,EAAXA,QACzBqC,EAAa1E,EAAO,mBAAqB,mBACzC2E,EAAoB3E,EAAO,EAAI,GAC/B4E,EAAuB5E,EAAO,mBAAqB,UACnD6E,EAAkB7E,EAAO,QAAU,UAEzC,OACE,yBACEqC,QAASA,EACTuB,MAAK,eACAZ,EADA,CAEH8B,QAASH,EACTL,MAAOO,EACPE,WAAYH,KAGd,kBAAC9E,EAAA,EAAD,YACA,2BAAI4E,IA+CKzD,qBA1Cf,SAA4B+D,GAAQ,IAC1B5D,EAAiB4D,EAAjB5D,OAAQpB,EAASgF,EAAThF,KAEhBqB,QAAQC,IAAIF,GAEZ,IAAM6D,EAAWpD,cALgB,EAMPN,mBAAS,IANF,mBAM1BhB,EAN0B,KAMnB2E,EANmB,OAkBT3D,oBAAS,GAlBA,mBAkB1B4D,EAlB0B,KAkBpBC,EAlBoB,KAmB3B/C,EAAU,WACd+C,GAASD,IAGX,OACE,6BACGA,EACC,kBAAC3B,EAAD,CACEpC,OAAQA,EACRsC,cAfc,WACpBuB,ED1GmB,SAAC7D,EAAQnB,GAC9B,MAAO,CACLiC,KAAMxB,EAAUC,SAChBwB,QAAS,CAAElC,OAAMmB,WCuGRiE,CAAQjE,EAAQb,IACzB2E,EAAS,IACTE,GAASD,IAaH1B,cAtBc,WCnGD,IAAA6B,EDoGnBL,GCpGmBK,EDoGF/E,ECnGZ,CACL2B,KAAMxB,EAAUE,SAChBuB,QAASmD,KDkGTJ,EAAS,IACTE,GAASD,IAoBH9C,QAASA,EACTnC,SATS,SAAAM,GAAC,OAAI0E,EAAS1E,EAAEuB,OAAOxB,QAUhCA,MAAOA,EACPP,KAAMA,IAGR,kBAACyE,EAAD,CAAiBpC,QAASA,EAASrC,KAAMA,QE5H3CgD,EAAS,CACbuC,UAAW,CACThB,gBAAiB,UACjBnB,aAAc,EACdE,MAAO,IACPU,QAAS,EACTwB,YAAa,IAwCFC,MApCf,YAAsD,IAAhCH,EAA+B,EAA/BA,MAAOI,EAAwB,EAAxBA,MAAOtE,EAAiB,EAAjBA,OAAQD,EAAS,EAATA,MAC1C,OACE,kBAAC,IAAD,CAAWmB,YAAaC,OAAOnB,GAASD,MAAOA,IAC5C,SAAAqB,GAAQ,OACP,yCACMA,EAASG,eADf,CAEEF,IAAKD,EAASE,UACVF,EAASI,iBAEb,yBAAKgB,MAAOZ,EAAOuC,WACjB,kBAAC,IAAD,CAAWI,YAAapD,OAAOnB,GAASc,KAAK,SAC1C,SAAAM,GAAQ,OACP,yCAASA,EAASoD,eAAlB,CAAkCnD,IAAKD,EAASE,WAC9C,4BAAK4C,GACJI,EAAMG,KAAI,SAACC,EAAM3E,GAAP,OACT,kBAAC,EAAD,CACE4E,IAAKD,EAAK5E,GACVC,MAAOA,EACPlB,KAAM6F,EAAK7F,KACXiB,GAAI4E,EAAK5E,GACTE,OAAQA,OAGXoB,EAASnC,YACV,kBAAC,EAAD,CAAoBe,OAAQA,IAAW,c,+NC/BzD,IAAM4E,EAAcC,YAAH,KAKXC,EAAgB5G,IAAOC,IAAV,KAuDJ0B,mBAlDS,SAAAkF,GAAK,MAAK,CAChCC,MAAOD,EAAMC,MACbV,MAAOS,EAAMC,MAAMV,SAgDNzE,EA7Cf,SAAakF,GAAQ,IACXC,EAAUD,EAAVC,MACFnB,EAAWpD,cAiBjB,OACE,kBAAC,IAAD,CAAiBwE,UAhBD,SAAAC,GAAW,IACnBC,EAA2CD,EAA3CC,YAAaC,EAA8BF,EAA9BE,OAAQlE,EAAsBgE,EAAtBhE,YAAaJ,EAASoE,EAATpE,KAC1Cb,QAAQC,IAAIgF,GACPC,GACLtB,EFvBgB,SAClBwB,EACAC,EACAC,EACAC,EACAtE,EACAJ,GAEA,MAAO,CACLA,KAAMxB,EAAUG,cAChBsB,QAAS,CACPsE,mBACAC,iBACAC,sBACAC,oBACAtE,cACAJ,SEQA2E,CACEL,EAAOb,YACPY,EAAYZ,YACZa,EAAOrF,MACPoF,EAAYpF,MACZmB,EACAJ,MAMDb,QAAQC,IAAI8E,GACb,kBAAC,IAAD,CAAWT,YAAY,WAAWmB,UAAU,aAAa5E,KAAK,SAC3D,SAAAM,GAAQ,OACP,kBAAC0D,EAAD,iBAAmB1D,EAASoD,eAA5B,CAA4CnD,IAAKD,EAASE,WACvD0D,EAAMP,KAAI,SAAC7F,EAAMmB,GAAP,OACT,kBAAC,EAAD,CACEC,OAAQpB,EAAKkB,GACb6E,IAAK/F,EAAKkB,GACVoE,MAAOtF,EAAKsF,MACZI,MAAO1F,EAAK0F,MACZvE,MAAOA,OAGVqB,EAASnC,YAEV,kBAAC,EAAD,CAAoBL,MAAI,QAI9B,kBAACgG,EAAD,UCnDce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBChBF/F,EAAS,EACTgG,EAAS,EACPC,EAAe,CACnB,CACE/B,MAAO,wCACPpE,GAAG,iCAAD,OAAU,GACZwE,MAAO,CACL,CACExE,GAAG,2BAAD,OAAS,GACXjB,KAAM,4BAER,CACEiB,GAAG,2BAAD,OAAS,GACXjB,KAAM,iCCZd,IAIeqH,EAJKC,YAAgB,CAClCnB,MDiBa,WAAoD,IAA/BD,EAA8B,uDAAtBkB,EAAcG,EAAQ,uCAChE,OAAQA,EAAOtF,MACb,KAAKxB,EAAUE,SACb,IAAM6G,EAAU,CACdnC,MAAOkC,EAAOrF,QACduD,MAAO,GACPxE,GAAG,iCAAD,OAAUE,IAGd,OADAA,GAAU,EACJ,GAAN,mBAAW+E,GAAX,CAAkBsB,IAEpB,KAAK/G,EAAUC,SACb,IAAM+G,EAAU,CACdzH,KAAMuH,EAAOrF,QAAQlC,KACrBiB,GAAG,2BAAD,OAASkG,IAEbA,GAAU,EACV,IAAMO,EAAWxB,EAAMN,KAAI,SAAA7F,GACzB,OAAIA,EAAKkB,KAAOsG,EAAOrF,QAAQf,OACtB,eACFpB,EADL,CAEE0F,MAAM,GAAD,mBAAM1F,EAAK0F,OAAX,CAAkBgC,MAGlB1H,KAGX,OAAO2H,EAGT,KAAKjH,EAAUI,UAAY,IAAD,EACC0G,EAAOrF,QAO1BnC,GARkB,EAChBkB,GADgB,EACZM,SAOC2E,EAAMyB,MAAK,SAAA5H,GAAI,OAAIA,EAAKkB,KAAOsG,EAAOrF,QAAQf,WAO3DC,QAAQC,IAAItB,EAAK0F,OAEjB,IAAMmC,EAAS1B,EAAMN,KAAI,SAAA7F,GACvB,OAAO,eACFA,EADL,CAEE0F,MAAM,GAAD,mBACA1F,EAAK0F,OADL,gBAEE1F,EAAK0F,MAFP,CAEczF,KAAMuH,EAAOrF,QAAQX,kBAK5C,OAAOqG,EAGT,KAAKnH,EAAUG,cAAf,MAQM2G,EAAOrF,QANTsE,EAFJ,EAEIA,iBACAC,EAHJ,EAGIA,eACAC,EAJJ,EAIIA,oBACAC,EALJ,EAKIA,kBAEA1E,GAPJ,EAMII,YANJ,EAOIJ,MAEI4F,EAAO,YAAO3B,GAGpB,GAAa,SAATjE,EAAiB,CACnB,IAAMlC,EAAO8H,EAAQC,OAAOpB,EAAqB,GAEjD,OADAmB,EAAQC,OAAR,MAAAD,EAAO,CAAQlB,EAAmB,GAA3B,mBAAiC5G,KACjC8H,EAGT,GAAIrB,IAAqBC,EAAgB,CAAC,IAAD,EACjC1G,EAAOmG,EAAMyB,MAAK,SAAA5H,GAAI,OAAIyG,IAAqBzG,EAAKkB,MACpD4E,EAAO9F,EAAK0F,MAAMqC,OAAOpB,EAAqB,IAEpD,EAAA3G,EAAK0F,OAAMqC,OAAX,SAAkBnB,EAAmB,GAArC,mBAA2Cd,KAG7C,GAAIW,IAAqBC,EAAgB,CAAC,IAAD,EACjCsB,EAAY7B,EAAMyB,MAAK,SAAA5H,GAAI,OAAIyG,IAAqBzG,EAAKkB,MACzD4E,EAAOkC,EAAUtC,MAAMqC,OAAOpB,EAAqB,GACnDsB,EAAU9B,EAAMyB,MAAK,SAAA5H,GAAI,OAAI0G,IAAmB1G,EAAKkB,OAE3D,EAAA+G,EAAQvC,OAAMqC,OAAd,SAAqBnB,EAAmB,GAAxC,mBAA8Cd,KAGhD,OAAOgC,EAET,QACE,OAAO3B,M,oBE3GP+B,GAAQC,YAAYb,EAAac,YAAgBC,OACvDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,IACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5H,QAAQ4H,MAAMA,EAAMC,a","file":"static/js/main.735cfb25.chunk.js","sourcesContent":["//에딧을 할때 새로 나오는 카드착이 필요함\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Textarea from \"react-autosize-textarea\";\nimport Card from \"@material-ui/core/Card\";\n\nconst Container = styled.div`\n  width: 284px;\n  margin-bottom: 8px;\n`;\n\nconst StyledTextArea = styled(Textarea)`\n  resize: none;\n  width: 100%;\n  outline: none;\n  border: none;\n`;\n\nconst StyledCard = styled(Card)`\n  min-height: 85px;\n  padding: 6, 8, 2;\n`;\n\nconst ButtonContainer = styled.div`\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledIcon = styled(Icon)`\n  cursor: pointer;\n`;\n\nfunction TrelloForm({ list, text = \"\", onChange, closeForm, children }) {\n  const placeholder = list ? \"list title\" : \"title card\";\n  return (\n    <Container>\n      <StyledCard>\n        <StyledTextArea\n          placeholder={placeholder}\n          autoFocus\n          value={text}\n          onChange={e => {\n            onChange(e);\n          }}\n        ></StyledTextArea>\n      </StyledCard>\n      <ButtonContainer>{children}</ButtonContainer>\n      <StyledIcon onMouseDown={closeForm}></StyledIcon>\n    </Container>\n  );\n}\nexport default TrelloForm;\n","export * from \"./listsActions\";\nexport * from \"./cardsAction\";\n\nexport const CONSTANTS = {\n  ADD_CARD: \"ADD_CARD\",\n  ADD_LIST: \"ADD_LIST\",\n  DRAG_HAPPENED: \"DRAG_HAPPENED\",\n  EDIT_CARD: \"EDIT_CARD\"\n};\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardContent, Icon } from \"@material-ui/core\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport TrelloForm from \"./TrelloForm\";\nimport { useDispatch, connect } from \"react-redux\";\nimport { editCard } from \"../actions\";\n\nconst CardContainer = styled.div`\n  margin: 0 0 8px 0;\n  position: relative;\n  max-width: 100%;\n  word-wrap: break-word;\n`;\nconst EditButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  top: 5px;\n  opacity: 0.5;\n  ${CardContainer}:hover & {\n    display: block;\n    cursor: pointer;\n  }\n  & :hover {\n    opacity: 0.8;\n  }\n`;\n\nfunction TrelloCard({ text, id, index, listID }) {\n  console.log(id);\n  //card 의 text\n  const [cardText, setText] = useState(text);\n  const [edit, setEdit] = useState(false);\n  const disptach = useDispatch();\n\n  const handleChange = e => {\n    setText(e.target.value);\n  };\n  const closeForm = e => {\n    setEdit(false);\n  };\n  const saveCard = e => {\n    e.preventDefault();\n    disptach(editCard(id, listID, cardText));\n\n    setEdit(false);\n  };\n  const renderEditForm = () => {\n    //이제 여기에 TrelloForm 으로 지정하고 파일만들어서 그 새 카드 창 나오게 해야한다.\n    return (\n      <TrelloForm text={cardText} onChange={handleChange} closeForm={closeForm}>\n        <div onClick={saveCard}>저장</div>\n      </TrelloForm>\n    );\n  };\n\n  const renderCard = () => {\n    return (\n      <Draggable draggableId={String(id)} index={index}>\n        {provided => (\n          <CardContainer\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n          >\n            <Card>\n              <EditButton onMouseDown={() => setEdit(!edit)}>edit</EditButton>\n              <CardContent>\n                <Typography gutterBottom>{text}</Typography>\n              </CardContent>\n            </Card>\n            {provided.placeholder}\n          </CardContainer>\n        )}\n      </Draggable>\n    );\n  };\n  return edit ? renderEditForm() : renderCard();\n}\nexport default connect()(TrelloCard);\n","import { CONSTANTS } from \"../actions\";\nexport const addCard = (listID, text) => {\n  return {\n    type: CONSTANTS.ADD_CARD,\n    payload: { text, listID }\n  };\n};\nexport const editCard = (id, listID, cardText) => {\n  return {\n    type: CONSTANTS.EDIT_CARD,\n    payload: { id, listID, cardText }\n  };\n};\n","import React from \"react\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { useState } from \"react\";\nimport { Card, Button } from \"@material-ui/core\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nconst styles = {\n  openForButtonGroup: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    borderRadius: 3,\n    height: 36,\n    width: 272,\n    paddingLeft: 10\n  }\n};\n\nfunction RenderForm({\n  list,\n  onClick,\n  onChange,\n  value,\n  handleaddList,\n  handleaddCard\n}) {\n  const placeholder = list ? \"리스트 제목 입력 하셈\" : \"카드제목 입력 하셈 \";\n  const buttonTitle = list ? \"리스트 추가\" : \"카드 추가\";\n  return (\n    <div>\n      <Card\n        style={{\n          overflow: \"visible\",\n          minHeight: 80,\n          minWidth: 272,\n          padding: \"6px 8px 2px\"\n        }}\n      >\n        <TextareaAutosize\n          placeholder={placeholder}\n          autoFocus\n          onClick={onClick}\n          onChange={onChange}\n          value={value}\n          style={{\n            resize: \"none\",\n            width: \"100%\",\n            outline: \"none\",\n            border: \"none\"\n          }}\n        />\n      </Card>\n      <div>\n        <Button\n          onMouseDown={list ? handleaddList : handleaddCard}\n          onClick={onClick}\n          variant=\"contained\"\n          style={{ color: \"white\", backgroundColor: \"#151515\" }}\n        >\n          {buttonTitle}\n        </Button>\n        <Icon onClick={onClick} style={{ marginLeft: 8, cursor: \"pointer\" }}>\n          close\n        </Icon>\n      </div>\n    </div>\n  );\n}\n\nfunction RenderAddButton({ list, onClick }) {\n  const buttonText = list ? \"add another list\" : \"add another card\";\n  const buttonTextOpacity = list ? 1 : 0.5;\n  const buttonTextBackground = list ? \"rgba(0,0,0,0.15)\" : \"inherit\";\n  const buttonTextColor = list ? \"white\" : \"inherit\";\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        ...styles.openForButtonGroup,\n        opacity: buttonTextOpacity,\n        color: buttonTextColor,\n        background: buttonTextBackground\n      }}\n    >\n      <Icon>add</Icon>\n      <p>{buttonText}</p>\n    </div>\n  );\n}\n\nfunction TrelloActionButton(props) {\n  const { listID, list } = props;\n\n  console.log(listID);\n\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n  const handleaddList = () => {\n    dispatch(addList(value));\n    setValue(\"\");\n    setOpen(!open);\n  };\n\n  const handleaddCard = () => {\n    dispatch(addCard(listID, value));\n    setValue(\"\");\n    setOpen(!open);\n  };\n  const [open, setOpen] = useState(false);\n  const onClick = () => {\n    setOpen(!open);\n  };\n  const onChange = e => setValue(e.target.value);\n  return (\n    <div>\n      {open ? (\n        <RenderForm\n          listID={listID}\n          handleaddCard={handleaddCard}\n          handleaddList={handleaddList}\n          onClick={onClick}\n          onChange={onChange}\n          value={value}\n          list={list}\n        />\n      ) : (\n        <RenderAddButton onClick={onClick} list={list} />\n      )}\n    </div>\n  );\n}\n\nexport default connect()(TrelloActionButton);\n","import { CONSTANTS } from \"../actions\";\nexport const addList = title => {\n  return {\n    type: CONSTANTS.ADD_LIST,\n    payload: title\n  };\n};\n\nexport const sort = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  type\n) => {\n  return {\n    type: CONSTANTS.DRAG_HAPPENED,\n    payload: {\n      droppableIdStart,\n      droppableIdEnd,\n      droppableIndexStart,\n      droppableIndexEnd,\n      draggableId,\n      type\n    }\n  };\n};\n","import React from \"react\";\nimport TrelloCard from \"./TrelloCard\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst styles = {\n  container: {\n    backgroundColor: \"#dfe3e6\",\n    borderRadius: 3,\n    width: 300,\n    padding: 8,\n    marginRight: 8\n  }\n};\n\nfunction TrelloList({ title, cards, listID, index }) {\n  return (\n    <Draggable draggableId={String(listID)} index={index}>\n      {provided => (\n        <div\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          {...provided.dragHandleProps}\n        >\n          <div style={styles.container}>\n            <Droppable droppableId={String(listID)} type=\"card\">\n              {provided => (\n                <div {...provided.droppableProps} ref={provided.innerRef}>\n                  <h4>{title}</h4>\n                  {cards.map((card, index) => (\n                    <TrelloCard\n                      key={card.id}\n                      index={index}\n                      text={card.text}\n                      id={card.id}\n                      listID={listID}\n                    />\n                  ))}\n                  {provided.placeholder}\n                  <TrelloActionButton listID={listID} />{\" \"}\n                  {/*카드안에  list 가없으니까 false 이다.  */}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\nexport default TrelloList;\n","import React from \"react\";\nimport TrelloList from \"./components/TrelloList\";\nimport { connect, useDispatch } from \"react-redux\";\nimport TrelloActionButton from \"./components/TrelloActionButton\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"./actions/listsActions\";\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    background:#6E6E6E;\n  }\n`;\nconst ListContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst mapStateToProps = state => ({\n  lists: state.lists,\n  cards: state.lists.cards\n});\n\nfunction App(state) {\n  const { lists } = state;\n  const dispatch = useDispatch();\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n    console.log(result);\n    if (!destination) return;\n    dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      {console.log(lists)}\n      <Droppable droppableId=\"akk-list\" direction=\"horizontal\" type=\"list\">\n        {provided => (\n          <ListContainer {...provided.droppableProps} ref={provided.innerRef}>\n            {lists.map((list, index) => (\n              <TrelloList\n                listID={list.id}\n                key={list.id}\n                title={list.title}\n                cards={list.cards}\n                index={index}\n              />\n            ))}\n            {provided.placeholder}\n            {/*카드 밖에 추가버튼 뜸 왜냐면 list 가 참값이니까.*/}\n            <TrelloActionButton list />\n          </ListContainer>\n        )}\n      </Droppable>\n      <GlobalStyle />\n    </DragDropContext>\n  );\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CONSTANTS } from \"../actions\";\n\nlet listID = 1;\nlet cardID = 2;\nconst initialState = [\n  {\n    title: \"어제 못한것들\",\n    id: `리스트번호${0}`,\n    cards: [\n      {\n        id: `카드번호${0}`,\n        text: \"코테준비\"\n      },\n      {\n        id: `카드번호${1}`,\n        text: \"포폴 관리 \"\n      }\n    ]\n  }\n];\n\nexport default function listRedcuer(state = initialState, action) {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `리스트번호${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        id: `카드번호${cardID}`\n      };\n      cardID += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n\n    // edit\n    case CONSTANTS.EDIT_CARD: {\n      const { id, cardText } = action.payload;\n\n      /*\n      id: \"카드번호2\"\n      listID: \"리스트번호1\"\n      cardText: \"하드코딩한것 깔끔하게 고치기 css부분 스타일드 컴포\n       */\n      const list = state.find(list => list.id === action.payload.listID);\n      //const card = list.cards.find(id => id.id === editCard.id);\n\n      // const editcard = { ...card, id: id, text: cardText };\n\n      // console.log(editcard);\n      // console.log(card);\n      console.log(list.cards);\n\n      const update = state.map(list => {\n        return {\n          ...list,\n          cards: [\n            ...list.cards,\n            { ...list.cards, text: action.payload.cardText }\n          ]\n        };\n      });\n\n      return update;\n    }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type\n      } = action.payload;\n      const newStat = [...state];\n\n      //리스트 주변을 드래깅\n      if (type === \"list\") {\n        const list = newStat.splice(droppableIndexStart, 1);\n        newStat.splice(droppableIndexEnd, 0, ...list);\n        return newStat;\n      }\n      //같은 리스트 안에서\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n      //다른 리스트\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find(list => droppableIdStart === list.id);\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state.find(list => droppableIdEnd === list.id);\n\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newStat;\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport listRedcuer from \"./listReducer\";\n\nconst rootReducer = combineReducers({\n  lists: listRedcuer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./modules\";\nimport logger from \"redux-logger\";\n//g\nconst store = createStore(rootReducer, applyMiddleware(logger));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}