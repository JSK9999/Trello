{"version":3,"sources":["components/TrelloCard.js","actions/index.js","components/TrelloActionButton.js","actions/cardsAction.js","actions/listsActions.js","components/TrelloList.js","App.js","serviceWorker.js","modules/listReducer.js","modules/index.js","index.js"],"names":["TrelloCard","text","id","index","styles","cardContainer","marginBottom","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","style","CardContent","Typography","gutterBottom","placeholder","CONSTANTS","ADD_CARD","ADD_LIST","DRAG_HAPPENED","display","alignItems","cursor","borderRadius","height","width","paddingLeft","RenderForm","list","onClick","onChange","value","handleaddList","handleaddCard","buttonTitle","overflow","minHeight","minWidth","padding","autoFocus","resize","outline","border","Button","onMouseDown","variant","color","backgroundColor","Icon","marginLeft","RenderAddButton","buttonText","buttonTextOpacity","buttonTextBackground","buttonTextColor","opacity","background","connect","props","listID","console","log","dispatch","useDispatch","useState","setValue","open","setOpen","type","payload","addCard","title","e","target","container","marginRight","TrelloList","cards","droppableId","droppableProps","map","card","key","GlobalStyle","createGlobalStyle","listsContainder","flexDirection","state","lists","onDragEnd","result","destination","source","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","sort","direction","Boolean","window","location","hostname","match","cardID","initialState","rootReducer","combineReducers","action","newList","newCard","newState","newStat","splice","find","listStart","listEnd","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17001b67.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CardContent } from \"@material-ui/core\";\nimport { Draggable } from \"react-beautiful-dnd\";\nfunction TrelloCard({ text, id, index }) {\n  const styles = {\n    cardContainer: {\n      marginBottom: 8\n    }\n  };\n  return (\n    <Draggable draggableId={String(id)} index={index}>\n      {provided => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Card style={styles.cardContainer}>\n            <CardContent>\n              <Typography gutterBottom>{text}</Typography>\n            </CardContent>\n          </Card>\n          {provided.placeholder}\n        </div>\n      )}\n    </Draggable>\n  );\n}\nexport default TrelloCard;\n","export * from \"./listsActions\";\nexport * from \"./cardsAction\";\n\nexport const CONSTANTS = {\n  ADD_CARD: \"ADD_CARD\",\n  ADD_LIST: \"ADD_LIST\",\n  DRAG_HAPPENED: \"DRAG_HAPPENED\"\n};\n","import React from \"react\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { useState } from \"react\";\nimport { Card, Button } from \"@material-ui/core\";\nimport TextareaAutosize from \"react-autosize-textarea\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { addList, addCard } from \"../actions\";\n\nconst styles = {\n  openForButtonGroup: {\n    display: \"flex\",\n    alignItems: \"center\",\n    cursor: \"pointer\",\n    borderRadius: 3,\n    height: 36,\n    width: 272,\n    paddingLeft: 10\n  }\n};\n\nfunction RenderForm({\n  list,\n  onClick,\n  onChange,\n  value,\n  handleaddList,\n  handleaddCard\n}) {\n  const placeholder = list ? \"리스트 제목 입력 하셈\" : \"카드제목 입력 하셈 \";\n  const buttonTitle = list ? \"리스트 추가\" : \"카드 추가\";\n  return (\n    <div>\n      <Card\n        style={{\n          overflow: \"visible\",\n          minHeight: 80,\n          minWidth: 272,\n          padding: \"6px 8px 2px\"\n        }}\n      >\n        <TextareaAutosize\n          placeholder={placeholder}\n          autoFocus\n          onClick={onClick}\n          onChange={onChange}\n          value={value}\n          style={{\n            resize: \"none\",\n            width: \"100%\",\n            outline: \"none\",\n            border: \"none\"\n          }}\n        />\n      </Card>\n      <div>\n        <Button\n          onMouseDown={list ? handleaddList : handleaddCard}\n          onClick={onClick}\n          variant=\"contained\"\n          style={{ color: \"white\", backgroundColor: \"#151515\" }}\n        >\n          {buttonTitle}\n        </Button>\n        <Icon onClick={onClick} style={{ marginLeft: 8, cursor: \"pointer\" }}>\n          close\n        </Icon>\n      </div>\n    </div>\n  );\n}\n\nfunction RenderAddButton({ list, onClick }) {\n  const buttonText = list ? \"add another list\" : \"add another card\";\n  const buttonTextOpacity = list ? 1 : 0.5;\n  const buttonTextBackground = list ? \"rgba(0,0,0,0.15)\" : \"inherit\";\n  const buttonTextColor = list ? \"white\" : \"inherit\";\n\n  return (\n    <div\n      onClick={onClick}\n      style={{\n        ...styles.openForButtonGroup,\n        opacity: buttonTextOpacity,\n        color: buttonTextColor,\n        background: buttonTextBackground\n      }}\n    >\n      <Icon>add</Icon>\n      <p>{buttonText}</p>\n    </div>\n  );\n}\n\nfunction TrelloActionButton(props) {\n  const { listID, list } = props;\n\n  console.log(listID);\n\n  const dispatch = useDispatch();\n  const [value, setValue] = useState(\"\");\n  const handleaddList = () => {\n    dispatch(addList(value));\n    setValue(\"\");\n    setOpen(!open);\n  };\n\n  const handleaddCard = () => {\n    dispatch(addCard(listID, value));\n    setValue(\"\");\n    setOpen(!open);\n  };\n  const [open, setOpen] = useState(false);\n  const onClick = () => {\n    setOpen(!open);\n  };\n  const onChange = e => setValue(e.target.value);\n  return (\n    <div>\n      {open ? (\n        <RenderForm\n          listID={listID}\n          handleaddCard={handleaddCard}\n          handleaddList={handleaddList}\n          onClick={onClick}\n          onChange={onChange}\n          value={value}\n          list={list}\n        />\n      ) : (\n        <RenderAddButton onClick={onClick} list={list} />\n      )}\n    </div>\n  );\n}\n\nexport default connect()(TrelloActionButton);\n","import { CONSTANTS } from \"../actions\";\nexport const addCard = (listID, text) => {\n  return {\n    type: CONSTANTS.ADD_CARD,\n    payload: { text, listID }\n  };\n};\n","import { CONSTANTS } from \"../actions\";\nexport const addList = title => {\n  return {\n    type: CONSTANTS.ADD_LIST,\n    payload: title\n  };\n};\n\nexport const sort = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  type\n) => {\n  return {\n    type: CONSTANTS.DRAG_HAPPENED,\n    payload: {\n      droppableIdStart,\n      droppableIdEnd,\n      droppableIndexStart,\n      droppableIndexEnd,\n      draggableId,\n      type\n    }\n  };\n};\n","import React from \"react\";\nimport TrelloCard from \"./TrelloCard\";\nimport TrelloActionButton from \"./TrelloActionButton\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst styles = {\n  container: {\n    backgroundColor: \"#dfe3e6\",\n    borderRadius: 3,\n    width: 300,\n    padding: 8,\n    marginRight: 8\n  }\n};\n\nfunction TrelloList({ title, cards, listID, index }) {\n  return (\n    <Draggable draggableId={String(listID)} index={index}>\n      {provided => (\n        <div\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          {...provided.dragHandleProps}\n        >\n          <div style={styles.container}>\n            <Droppable droppableId={String(listID)} type=\"card\">\n              {provided => (\n                <div {...provided.droppableProps} ref={provided.innerRef}>\n                  <h4>{title}</h4>\n                  {cards.map((card, index) => (\n                    <TrelloCard\n                      key={card.id}\n                      index={index}\n                      text={card.text}\n                      id={card.id}\n                      listID={listID}\n                    />\n                  ))}\n                  {provided.placeholder}\n                  <TrelloActionButton listID={listID} />{\" \"}\n                  {/*카드안에  list 가없으니까 false 이다.  */}\n                </div>\n              )}\n            </Droppable>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\nexport default TrelloList;\n","import React from \"react\";\nimport TrelloList from \"./components/TrelloList\";\nimport { connect, useDispatch } from \"react-redux\";\nimport TrelloActionButton from \"./components/TrelloActionButton\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"./actions/listsActions\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    background:#6E6E6E;\n  }\n`;\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n});\n\nconst styles = {\n  listsContainder: {\n    display: \"flex\",\n    flexDirection: \"row\"\n  }\n};\n\nfunction App({ lists }) {\n  const dispatch = useDispatch();\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n    console.log(result);\n    if (!destination) return;\n    dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"akk-list\" direction=\"horizontal\" type=\"list\">\n        {provided => (\n          <div\n            style={styles.listsContainder}\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            {lists.map((list, index) => (\n              <TrelloList\n                listID={list.id}\n                key={list.id}\n                title={list.title}\n                cards={list.cards}\n                index={index}\n              />\n            ))}\n            {provided.placeholder}\n            <TrelloActionButton list />\n            {/*카드 밖에 추가버튼 뜸 왜냐면 list 가 참값이니까.*/}\n          </div>\n        )}\n      </Droppable>\n      <GlobalStyle />\n    </DragDropContext>\n  );\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CONSTANTS } from \"../actions\";\n\nlet listID = 2;\nlet cardID = 5;\nconst initialState = [\n  {\n    title: \"어제 못한것들\",\n    id: `리스트번호${0}`,\n    cards: [\n      {\n        id: `카드번호${0}`,\n        text: \"코테준비\"\n      },\n      {\n        id: `카드번호${1}`,\n        text: \"포폴 관리 \"\n      }\n    ]\n  },\n  {\n    title: \"오늘 할일\",\n    id: `리스트번호${1}`,\n    cards: [\n      {\n        id: `카드번호${2}`,\n        text:\n          \"하드코딩한것 깔끔하게 고치기 css부분 스타일드 컴포넌트로 정리하기\"\n      },\n      {\n        id: `카드번호${3}`,\n        text:\n          \"리덕스 하드코딩했으니 redux-thunk 로 바꿔보자 router로 페이지이동도 고려.\"\n      },\n      {\n        id: `카드번호${4}`,\n        text:\n          \"API요청을 받을수 있도록 만들고 싶다 근데  initialState의 값을 요청상태 3가지 관리하는데 기존의 값과어찌 합칠까...\"\n      }\n    ]\n  }\n];\n\nexport default function listRedcuer(state = initialState, action) {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `리스트번호${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        id: `카드번호${cardID}`\n      };\n      cardID += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type\n      } = action.payload;\n      const newStat = [...state];\n\n      //리스트 주변을 드래깅\n      if (type === \"list\") {\n        const list = newStat.splice(droppableIndexStart, 1);\n        newStat.splice(droppableIndexEnd, 0, ...list);\n        return newStat;\n      }\n      //같은 리스트 안에서\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n      //다른 리스트\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find(list => droppableIdStart === list.id);\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state.find(list => droppableIdEnd === list.id);\n\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newStat;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport listRedcuer from \"./listReducer\";\n\nconst rootReducer = combineReducers({\n  lists: listRedcuer\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./modules\";\nimport logger from \"redux-logger\";\n//g\nconst store = createStore(rootReducer, applyMiddleware(logger));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}