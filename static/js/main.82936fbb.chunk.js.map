{"version":3,"sources":["components/TrelloForm.js","components/TrelloButton.js","modules/cardReducer.js","components/TrelloCard.js","modules/listReducer.js","components/TrelloOpenForm.js","components/TrelloAdd.js","components/TrelloList.js","container/TrelloListContainer.js","App.js","serviceWorker.js","modules/originReducers.js","modules/index.js","store/index.js","index.js"],"names":["Container","styled","div","StyledCard","Card","StyledTextArea","Textarea","ButtonContainer","StyledIcon","Icon","TrelloForm","React","memo","list","text","onChange","closeForm","children","placeholder","autoFocus","value","e","onBlur","onMouseDown","StyledButton","Button","TrelloButton","onClick","onKeyPress","variant","initialState","id","TextareaAutosize","CardContainer","EditButton","DeleteButton","TrelloCard","index","listID","console","log","dispatch","useDispatch","useState","edit","setEdit","modal","setModal","cardText","setText","handleDeleteCard","type","payload","deleteCard","openModalForm","closeModalForm","target","handleChange","preventDefault","editCard","saveCard","draggableId","String","porvided","draggableProps","dragHandleProps","ref","innerRef","fontSize","CardContent","Typography","noWrap","Dialog","open","onClose","DialogTitle","DialogContent","title","cards","TrelloOpenForm","buttonTextOpacity","buttonTextColor","buttonTextBackground","OpenFormButton","TrelloAdd","props","formOpen","state","setState","handleInputChange","uuid","addCard","ListContainer","StyledInput","input","TitleContainer","ListTitle","h4","TrelloList","listTitle","setListTitle","titleChange","editList","handleDelete","deleteList","provided","droppableId","onSubmit","droppableProps","map","card","key","ListsContainer","TrelloListContainer","lists","useSelector","origin","onDragEnd","result","destination","source","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","sort","direction","listCards","cardID","Header","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newState","pullList","splice","deleteState","filter","item","newList","push","listStart","listEnd","newCards","newCard","persistConfig","storage","enhancedReducer","persistReducer","store","createStore","applyMiddleware","logger","persistor","persistStore","Store","GlobalStyle","createGlobalStyle","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82936fbb.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Textarea from \"react-textarea-autosize\";\nimport Card from \"@material-ui/core/Card\";\n\nconst Container = styled.div`\n  width: 284px;\n  margin-bottom: 8px;\n`;\n\nconst StyledCard = styled(Card)`\n  min-height: 85px;\n  padding: 6px 8px 2px;\n`;\n\nconst StyledTextArea = styled(Textarea)`\n  resize: none;\n  width: 100%;\n  overflow: hidden;\n  outline: none;\n  border: none;\n`;\n\nconst ButtonContainer = styled.div`\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin-left: 8px;\n  cursor: pointer;\n`;\n\nconst TrelloForm = React.memo(\n  ({ list, text = \"\", onChange, closeForm, children }) => {\n    const placeholder = list ? \"리스트제목 입력\" : \"카드내용 입력\";\n\n    return (\n      <Container>\n        <StyledCard>\n          <StyledTextArea\n            placeholder={placeholder}\n            autoFocus\n            value={text}\n            onChange={e => onChange(e)}\n            onBlur={closeForm}\n          />\n        </StyledCard>\n        <ButtonContainer>\n          {children}\n          <StyledIcon onMouseDown={closeForm}>close</StyledIcon>\n        </ButtonContainer>\n      </Container>\n    );\n  }\n);\n\nexport default TrelloForm;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\n\nconst StyledButton = styled(Button)`\n  && {\n    color: white;\n    background: #2e2e2e;\n  }\n`;\n\nconst TrelloButton = ({ children, onClick, onKeyPress }) => {\n  return (\n    <StyledButton\n      variant=\"contained\"\n      onMouseDown={onClick}\n      onKeyPress={onKeyPress}\n    >\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default TrelloButton;\n","import uuid from \"uuid/v4\";\nconst ADD_CARD = \"ADD_CARD\";\nconst EDIT_CARD = \"EDIT_CARD\";\nconst DELETE_CARD = \"DELETE_CARD\";\nexport const addCard = (listID, text) => {\n  const id = uuid();\n  return {\n    type: ADD_CARD,\n    payload: { listID, text, id }\n  };\n};\nexport const editCard = (id, listID, cardText) => {\n  return {\n    type: EDIT_CARD,\n    payload: { id, listID, cardText }\n  };\n};\nexport const deleteCard = (id, listID) => {\n  return {\n    type: DELETE_CARD,\n    payload: { id, listID }\n  };\n};\nconst initialState = {\n  \"0카드\": {\n    text: \"안녕하세요 김재선 입니다 \",\n    id: \"0카드\",\n    list: \"0리스트\"\n  }\n};\n\nexport default function cardReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_CARD: {\n      const { listID, text, id } = action.payload;\n\n      const newCard = {\n        text,\n        id: `${id}카드`,\n        list: listID\n      };\n      return { ...state, [`${id}카드`]: newCard };\n    }\n    case EDIT_CARD: {\n      const { id, cardText } = action.payload;\n      const card = state[id];\n      card.text = cardText;\n      return { ...state, [`${id}카드`]: card };\n    }\n    case DELETE_CARD: {\n      const { id } = action.payload;\n      const deleteState = state;\n      delete deleteState[id];\n      return deleteState;\n    }\n    default:\n      return state;\n  }\n}\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport styled from \"styled-components\";\nimport Icon from \"@material-ui/core/Icon\";\nimport TrelloForm from \"./TrelloForm\";\nimport TrelloButton from \"./TrelloButton\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { useDispatch } from \"react-redux\";\nimport { editCard, deleteCard } from \"../modules/cardReducer\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  TextareaAutosize\n} from \"@material-ui/core\";\n\nconst StyledTextArea = styled(TextareaAutosize)`\n  resize: none;\n  width: 500px;\n  height: 500px;\n  overflow: hidden;\n  outline: none;\n  border: none;\n`;\n\nconst CardContainer = styled.div`\n  margin: 0 0 8px 0;\n  position: relative;\n  max-width: 100%;\n  word-wrap: break-word;\n`;\n\nconst EditButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  top: 5px;\n  opacity: 0.5;\n  ${CardContainer}:hover & {\n    display: block;\n    color: #01df01;\n    cursor: pointer;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst DeleteButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  bottom: 5px;\n  opacity: 0.5;\n  ${CardContainer}:hover & {\n    display: block;\n    color: #df013a;\n    cursor: pointer;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n`;\nfunction TrelloCard({ text, id, index, listID }) {\n  console.log(listID);\n  console.log(id);\n  const dispatch = useDispatch();\n  const [edit, setEdit] = useState(false);\n  const [modal, setModal] = useState(false);\n  const [cardText, setText] = useState(text);\n  console.log(cardText);\n  const closeForm = e => {\n    setEdit(false);\n  };\n  const handleChange = e => {\n    setText(e.target.value);\n  };\n  const saveCard = e => {\n    e.preventDefault();\n    dispatch(editCard(id, listID, cardText));\n    setEdit(false);\n  };\n  const handleDeleteCard = e => {\n    dispatch(deleteCard(id, listID));\n  };\n  const renderEditForm = () => {\n    return (\n      <TrelloForm\n        text={cardText}\n        onChange={e => handleChange(e)}\n        closeForm={e => closeForm(e)}\n      >\n        <TrelloButton onClick={e => saveCard(e)}>save</TrelloButton>\n      </TrelloForm>\n    );\n  };\n  const openModalForm = () => {\n    setModal(true);\n  };\n  const closeModalForm = () => {\n    setModal(!modal);\n  };\n  const renderCard = () => {\n    return (\n      <Draggable draggableId={String(id)} index={index}>\n        {porvided => (\n          <CardContainer\n            {...porvided.draggableProps}\n            {...porvided.dragHandleProps}\n            ref={porvided.innerRef}\n          >\n            <Card>\n              {cardText && (\n                <EditButton onMouseDown={() => setEdit(true)} fontSize=\"small\">\n                  edit\n                </EditButton>\n              )}\n\n              <DeleteButton fontSize=\"small\" onMouseDown={handleDeleteCard}>\n                delete\n              </DeleteButton>\n              <CardContent>\n                <Typography noWrap onClick={openModalForm}>\n                  {text}\n                </Typography>\n                <Dialog open={modal} onClose={closeModalForm}>\n                  <DialogTitle>\n                    <h3>세부 내용</h3>\n                  </DialogTitle>\n                  <DialogContent>\n                    <StyledTextArea>{text}</StyledTextArea>\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n          </CardContainer>\n        )}\n      </Draggable>\n    );\n  };\n  console.log(text);\n  console.log(id);\n\n  return edit ? renderEditForm() : renderCard();\n}\nexport default TrelloCard;\n","import uuid from \"uuid/v4\";\nconst ADD_CARD = \"ADD_CARD\";\nconst ADD_LIST = \"ADD_LIST\";\nconst DRAG_HAPPENED = \"DRAG_HAPPENED\";\nconst DELETE_CARD = \"DELETE_CARD\";\nconst EDIT_LIST = \"EDIT_LIST\";\nconst DELETE_LIST = \"DELETE_LIST\";\nexport const addList = title => {\n  const id = uuid();\n  return { type: ADD_LIST, payload: { title, id } };\n};\nexport const deleteCard = (id, listID) => {\n  return {\n    type: DELETE_CARD,\n    payload: { id, listID }\n  };\n};\nexport const editList = (listID, title) => {\n  return {\n    type: EDIT_LIST,\n    payload: { listID, title }\n  };\n};\nexport const deleteList = listID => {\n  return {\n    type: DELETE_LIST,\n    payload: { listID }\n  };\n};\nconst initialState = {\n  \"0리스트\": {\n    id: \"0리스트\",\n    title: \"첫번째 리스트\",\n    cards: [\"0카드\"]\n  }\n};\nexport const sort = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  type\n) => ({\n  type: DRAG_HAPPENED,\n  payload: {\n    droppableIdStart,\n    droppableIdEnd,\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggableId,\n    type\n  }\n});\n\nexport default function listReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_LIST: {\n      const { title, id } = action.payload;\n      const newList = {\n        id: `${id}리스트`,\n        title: title,\n        cards: []\n      };\n      const newState = { ...state, [`${id}리스트`]: newList };\n      return newState;\n    }\n    case ADD_CARD:\n      const { listID, id } = action.payload;\n      const list = state[listID];\n      list.cards.push(`${id}카드`);\n      return { ...state, [listID]: list };\n\n    case DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexEnd,\n        droppableIndexStart,\n        type\n      } = action.payload;\n      if (type === \"list\") {\n        return state;\n      }\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state[droppableIdStart];\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n        return { ...state, [droppableIdStart]: list };\n      }\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state[droppableIdStart];\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state[droppableIdEnd];\n\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        return {\n          ...state,\n          [droppableIdStart]: listStart,\n          [droppableIdEnd]: listEnd\n        };\n      }\n      return state;\n    case DELETE_CARD: {\n      const { listID, id } = action.payload;\n\n      const list = state[listID];\n\n      const newCards = list.cards.filter(cardID => cardID !== id);\n      return { ...state, [listID]: { ...list, cards: newCards } };\n    }\n    case EDIT_LIST: {\n      const { listID, title } = action.payload;\n\n      const list = state[listID];\n      list.title = title;\n      return { ...state, [listID]: list };\n    }\n    case DELETE_LIST: {\n      const { listID } = action.payload;\n      const deleteList = state;\n      delete deleteList[listID];\n      return deleteList;\n    }\n    default:\n      return state;\n  }\n}\n\n/*\nlet listID = 1;\nlet cardID = 2;\nconst initialState = [\n  {\n    title: \"어제 못한것들\",\n    id: `리스트번호${0}`,\n    cards: [\n      {\n        id: `카드번호${0}`,\n        text: \"코테준비\"\n      },\n      {\n        id: `카드번호${1}`,\n        text: \"포폴 관리 \"\n      }\n    ]\n  }\n];\n\nexport default function listRedcuer(state = initialState, action) {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `리스트번호${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        id: `카드번호${cardID}`\n      };\n      cardID += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n\n    // edit\n    case CONSTANTS.EDIT_CARD: {\n      const { id, cardText, listID } = action.payload;\n\n      /*\n      id: \"카드번호2\"\n      listID: \"리스트번호1\"\n      cardText: \"하드코딩한것 깔끔하게 고치기 css부분 스타일드 컴포\n       /\n      const list = state.find(list => list.id === action.payload.listID);\n      //const card = list.cards.find(id => id.id === editCard.id);\n\n      // const editcard = { ...card, id: id, text: cardText };\n\n      // console.log(editcard);\n      // console.log(card);\n      console.log(listID);\n      console.log(list.id);\n      const card = { id: id, text: cardText };\n      const update = list.cards.map(\n        list => (list.id === listID ? { ...list, text: cardText } : list)\n\n        /* if (list) {\n          const update2 = list.cards.findIndex(function(item) {\n            return item.id === action.payload.id;\n          });\n          if (update2 > -1) {\n            list.cards.splice(update2, 1);\n          }\n          return {\n            ...list,\n            cards: list.cards.concat(card)\n          };\n        }\n      });\n\n      /*\n      const update2 = list.cards.findIndex(function(item) {\n        return item.id === action.payload.id;\n      });\n      if (update2 > -1) {\n        list.cards.splice(update2, 1);\n      }/\n      );\n      console.log(update);\n      return update;\n    }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type\n      } = action.payload;\n      const newStat = [...state];\n\n      //리스트 주변을 드래깅\n      if (type === \"list\") {\n        const list = newStat.splice(droppableIndexStart, 1);\n        newStat.splice(droppableIndexEnd, 0, ...list);\n        return newStat;\n      }\n      //같은 리스트 안에서\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n      //다른 리스트\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find(list => droppableIdStart === list.id);\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state.find(list => droppableIdEnd === list.id);\n\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newStat;\n\n    default:\n      return state;\n  }\n}\n\n\n*/\n","import React from \"react\";\nimport Icon from \"@material-ui/core/Icon\";\nimport styled from \"styled-components\";\n\nconst TrelloOpenForm = ({ list, children, onClick }) => {\n  const buttonTextOpacity = list ? 1 : 0.5;\n  const buttonTextColor = list ? \"white\" : \"inherit\";\n  const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\n\n  const OpenFormButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    border-radius: 3px;\n    height: 36px;\n    margin-left: 8px;\n    width: 300px;\n    padding-left: 10px;\n    padding-right: 10px;\n    opacity: ${buttonTextOpacity};\n    color: ${buttonTextColor};\n    background-color: ${buttonTextBackground};\n\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  `;\n\n  return (\n    <OpenFormButton onClick={onClick}>\n      <Icon>add</Icon>\n      {children}\n    </OpenFormButton>\n  );\n};\n\nexport default TrelloOpenForm;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { addCard } from \"../modules/cardReducer\";\nimport { addList } from \"../modules/listReducer\";\n\nimport TrelloForm from \"./TrelloForm\";\nimport TrelloButton from \"./TrelloButton\";\nimport TrelloOpenForm from \"./TrelloOpenForm\";\n\nfunction TrelloAdd(props) {\n  const { listID, list } = props;\n\n  const dispatch = useDispatch();\n  const [state, setState] = useState({\n    formOpen: false,\n    text: \"\"\n  });\n\n  const openForm = () => {\n    setState({\n      ...state,\n      formOpen: true\n    });\n  };\n\n  const closeForm = () => {\n    setState({ formOpen: false });\n  };\n\n  const handleInputChange = e => {\n    setState({\n      ...state,\n      text: e.target.value\n    });\n  };\n  const handleAddList = () => {\n    if (state.text) {\n      setState({ text: \"\" });\n    }\n    dispatch(addList(state.text));\n  };\n\n  const handleAddCard = () => {\n    if (state.text) {\n      setState({ text: \"\" });\n    }\n\n    dispatch(addCard(listID, state.text));\n  };\n\n  return state.formOpen ? (\n    <TrelloForm\n      list={list}\n      text={state.text}\n      onChange={e => handleInputChange(e)}\n      closeForm={closeForm}\n    >\n      <TrelloButton onClick={list ? handleAddList : handleAddCard}>\n        {list ? \"add list\" : \"add card\"}\n      </TrelloButton>\n    </TrelloForm>\n  ) : (\n    <TrelloOpenForm list={list} onClick={openForm}>\n      {list ? \"리스트 추가\" : \"카드 추가\"}\n    </TrelloOpenForm>\n  );\n}\n\nexport default TrelloAdd;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TrelloCard from \"../components/TrelloCard\";\nimport { useDispatch } from \"react-redux\";\nimport TrelloAdd from \"./TrelloAdd\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { useState } from \"react\";\n\nimport Icon from \"@material-ui/core/Icon\";\nimport { editList, deleteList } from \"../modules/listReducer\";\n\nconst ListContainer = styled.div`\n  position: relative;\n  background-color: #dfe3e6;\n  border-radius: 3px;\n  width: 300px;\n  padding: 8px;\n  height: 100%;\n  margin: 0 8px 0 0;\n`;\nconst StyledInput = styled.input`\n  width: 96.5%;\n  border: none;\n  outline-color: black;\n  border-radius: 3px;\n  margin-bottom: 3px;\n  padding: 5px;\n`;\nconst TitleContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n`;\nconst ListTitle = styled.h4`\n  transition: 0.3s ease-in;\n  ${TitleContainer}:hover & {\n    background: #ccc;\n  }\n`;\nconst EditButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  top: 5px;\n  opacity: 0.5;\n  ${ListContainer}:hover & {\n    display: block;\n    color: #01df01;\n    cursor: pointer;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst DeleteButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  margin-top: 3px;\n  opacity: 0.5;\n  ${ListContainer}:hover & {\n    display: block;\n    color: #df013a;\n    cursor: pointer;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n`;\nfunction TrelloList({ title, cards, listID, list, index, id }) {\n  const [edit, setEdit] = useState(false);\n  const [listTitle, setListTitle] = useState(title);\n  const dispatch = useDispatch();\n\n  const titleChange = e => {\n    setEdit(false);\n    dispatch(editList(listID, listTitle));\n  };\n  const handleChange = e => {\n    e.preventDefault();\n    setListTitle(e.target.value);\n  };\n  const handleDelete = () => {\n    dispatch(deleteList(listID));\n  };\n\n  const renderEditInput = () => {\n    return (\n      <form onSubmit={titleChange}>\n        <StyledInput\n          type=\"text\"\n          value={listTitle}\n          onChange={handleChange}\n          placeholder=\"수정후 enter를 입력하세요...\"\n        />\n      </form>\n    );\n  };\n\n  return (\n    <Draggable draggableId={String(listID)} index={index}>\n      {provided => (\n        <ListContainer\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <Droppable droppableId={String(listID)} type=\"card\">\n            {provided => (\n              <div>\n                {edit ? (\n                  renderEditInput()\n                ) : (\n                  <TitleContainer>\n                    <EditButton\n                      onMouseDown={() => setEdit(!edit)}\n                      fontSize=\"small\"\n                    >\n                      edit\n                    </EditButton>\n                    <DeleteButton onClick={handleDelete}>delete</DeleteButton>\n                    <ListTitle> {title}</ListTitle>\n                  </TitleContainer>\n                )}\n                <div {...provided.droppableProps} ref={provided.innerRef}>\n                  {cards.map((card, index) => {\n                    return (\n                      <TrelloCard\n                        //카드에는 텍스트 아이디 리스트\n                        text={card.text}\n                        key={card.id}\n                        id={card.id}\n                        index={index}\n                        listID={listID}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                  <TrelloAdd listID={listID} />\n                </div>\n              </div>\n            )}\n          </Droppable>\n        </ListContainer>\n      )}\n    </Draggable>\n  );\n}\nexport default TrelloList;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TrelloList from \"../components/TrelloList\";\nimport styled from \"styled-components\";\nimport TrelloAdd from \"../components/TrelloAdd\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"../modules/listReducer\";\n\nconst ListsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nfunction TrelloListContainer() {\n  const lists = useSelector(state => state.lists);\n  const origin = useSelector(state => state.origin);\n  console.log(origin);\n  const cards = useSelector(state => state.cards);\n  const dispatch = useDispatch();\n  const onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n    if (!destination) {\n      return;\n    }\n    dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n  console.log(lists);\n  return (\n    <div>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n          {provided => (\n            <ListsContainer\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {origin.map((listID, index) => {\n                const list = lists[listID];\n                if (list) {\n                  const listCards = list.cards.map(cardID => cards[cardID]);\n\n                  return (\n                    <TrelloList\n                      list={list}\n                      listID={list.id}\n                      title={list.title}\n                      key={list.id}\n                      cards={listCards}\n                      index={index}\n                    />\n                  );\n                }\n              })}\n              {provided.placeholder}\n              <TrelloAdd list />\n            </ListsContainer>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\nexport default TrelloListContainer;\n","import React from \"react\";\nimport TrelloListContainer from \"./container/TrelloListContainer\";\nimport styled from \"styled-components\";\nconst Header = styled.div`\n  display: flex;\n  position: fixed;\n  z-index: 1;\n  height: 75px;\n  padding: 1rem;\n  font-size: 1.25rem;\n  text-align: justify;\n  margin: 0 auto;\n  color: #e6e6e6;\n  font-weight: bold;\n`;\nfunction App() {\n  return (\n    <>\n      <TrelloListContainer />\n      <Header>\n        Trello의 리스트 와 카드 추가,수정,삭제 드래그 앤 드롭, 카드 클릭시 모달\n        기능이 있습니다.\n      </Header>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = [\"0리스트\"];\n\nconst ADD_LIST = \"ADD_LIST\";\nconst DRAG_HAPPENED = \"DRAG_HAPPENED\";\nconst DELETE_LIST = \"DELETE_LIST\";\nexport default function originReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_LIST: {\n      return [...state, `${action.payload.id}리스트`];\n    }\n    case DRAG_HAPPENED:\n      const { droppableIndexStart, droppableIndexEnd, type } = action.payload;\n      const newState = [...state];\n      if (type === \"list\") {\n        const pullList = newState.splice(droppableIndexStart, 1);\n        newState.splice(droppableIndexEnd, 0, ...pullList);\n        return newState;\n      }\n      return state;\n    case DELETE_LIST: {\n      const { listID } = action.payload;\n      const list = [...state];\n      const deleteState = list.filter(item => item !== listID);\n      return deleteState;\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport listRedcuer from \"./listReducer\";\nimport cardReducer from \"./cardReducer\";\nimport originReducer from \"./originReducers\";\n\nconst rootReducer = combineReducers({\n  origin: originReducer,\n  lists: listRedcuer,\n  cards: cardReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../modules/index\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport logger from \"redux-logger\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\nconst enhancedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function configureStore() {\n  const store = createStore(enhancedReducer, applyMiddleware(logger));\n  const persistor = persistStore(store);\n  return { store, persistor };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/es/integration/react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport Store from \"./store\";\nconst { persistor, store } = Store();\n\nconst GlobalStyle = createGlobalStyle`\n\n body{\n    background-color: #6E6E6E;\n }\n`;\n\n//const store = createStore(rootReducer, applyMiddleware(logger));\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <GlobalStyle />\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}