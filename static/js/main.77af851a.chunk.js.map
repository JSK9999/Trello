{"version":3,"sources":["components/TrelloForm.js","components/TrelloButton.js","modules/cardReducer.js","components/TrelloCard.js","modules/listReducer.js","components/TrelloOpenForm.js","components/TrelloAdd.js","components/TrelloList.js","container/TrelloListContainer.js","App.js","serviceWorker.js","modules/originReducers.js","modules/index.js","store/index.js","index.js"],"names":["Container","styled","div","StyledCard","Card","StyledTextArea","Textarea","ButtonContainer","StyledIcon","Icon","TrelloForm","React","memo","list","text","onChange","closeForm","children","placeholder","autoFocus","value","e","onBlur","onMouseDown","StyledButton","Button","TrelloButton","onClick","variant","initialState","id","CardContainer","EditButton","DeleteButton","TrelloCard","index","listID","console","log","dispatch","useDispatch","useState","edit","setEdit","cardText","setText","handleDeleteCard","type","payload","deleteCard","target","handleChange","preventDefault","editCard","saveCard","draggableId","String","porvided","draggableProps","dragHandleProps","ref","innerRef","fontSize","CardContent","Typography","title","cards","TrelloOpenForm","buttonTextOpacity","buttonTextColor","buttonTextBackground","OpenFormButton","TrelloAdd","props","formOpen","state","setState","handleInputChange","uuid","addCard","ListContainer","TitleContainer","input","ListTitle","h4","TrelloList","provided","droppableId","droppableProps","map","card","key","ListsContainer","TrelloListContainer","lists","useSelector","origin","onDragEnd","result","destination","source","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","sort","direction","listCards","cardID","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","newState","pullList","splice","newList","push","listStart","listEnd","newCards","filter","newCard","deleteState","persistConfig","storage","persistReducer","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.77af851a.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport Icon from \"@material-ui/core/Icon\";\nimport Textarea from \"react-textarea-autosize\";\nimport Card from \"@material-ui/core/Card\";\n\nconst Container = styled.div`\n  width: 284px;\n  margin-bottom: 8px;\n`;\n\nconst StyledCard = styled(Card)`\n  min-height: 85px;\n  padding: 6px 8px 2px;\n`;\n\nconst StyledTextArea = styled(Textarea)`\n  resize: none;\n  width: 100%;\n  overflow: hidden;\n  outline: none;\n  border: none;\n`;\n\nconst ButtonContainer = styled.div`\n  margin-top: 8px;\n  display: flex;\n  align-items: center;\n  margin-left: 8px;\n`;\n\nconst StyledIcon = styled(Icon)`\n  margin-left: 8px;\n  cursor: pointer;\n`;\n\nconst TrelloForm = React.memo(\n  ({ list, text = \"\", onChange, closeForm, children }) => {\n    const placeholder = list ? \"리스트제목 입력\" : \"카드내용 입력\";\n\n    return (\n      <Container>\n        <StyledCard>\n          <StyledTextArea\n            placeholder={placeholder}\n            autoFocus\n            value={text}\n            onChange={e => onChange(e)}\n            onBlur={closeForm}\n          />\n        </StyledCard>\n        <ButtonContainer>\n          {children}\n          <StyledIcon onMouseDown={closeForm}>close</StyledIcon>\n        </ButtonContainer>\n      </Container>\n    );\n  }\n);\n\nexport default TrelloForm;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\n\nconst StyledButton = styled(Button)`\n  && {\n    color: white;\n    background: #2e2e2e;\n  }\n`;\n\nconst TrelloButton = ({ children, onClick }) => {\n  return (\n    <StyledButton variant=\"contained\" onMouseDown={onClick}>\n      {children}\n    </StyledButton>\n  );\n};\n\nexport default TrelloButton;\n","import uuid from \"uuid/v4\";\nconst ADD_CARD = \"ADD_CARD\";\nconst EDIT_CARD = \"EDIT_CARD\";\nconst DELETE_CARD = \"DELETE_CARD\";\nexport const addCard = (listID, text) => {\n  const id = uuid();\n  return {\n    type: ADD_CARD,\n    payload: { listID, text, id }\n  };\n};\nexport const editCard = (id, listID, cardText) => {\n  return {\n    type: EDIT_CARD,\n    payload: { id, listID, cardText }\n  };\n};\nexport const deleteCard = (id, listID) => {\n  return {\n    type: DELETE_CARD,\n    payload: { id, listID }\n  };\n};\nconst initialState = {\n  \"0카드\": {\n    text: \"전에할일\",\n    id: \"0카드\",\n    list: \"0리스트\"\n  }\n};\n\nexport default function cardReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_CARD: {\n      const { listID, text, id } = action.payload;\n\n      const newCard = {\n        text,\n        id: `${id}카드`,\n        list: listID\n      };\n      return { ...state, [`${id}카드`]: newCard };\n    }\n    case EDIT_CARD: {\n      const { id, cardText } = action.payload;\n      const card = state[id];\n      card.text = cardText;\n      return { ...state, [`${id}카드`]: card };\n    }\n    case DELETE_CARD: {\n      const { id } = action.payload;\n      const deleteState = state;\n      delete deleteState[id];\n      return deleteState;\n    }\n    default:\n      return state;\n  }\n}\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport styled from \"styled-components\";\nimport Icon from \"@material-ui/core/Icon\";\nimport TrelloForm from \"./TrelloForm\";\nimport TrelloButton from \"./TrelloButton\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { useDispatch } from \"react-redux\";\nimport { editCard, deleteCard } from \"../modules/cardReducer\";\n\nconst CardContainer = styled.div`\n  margin: 0 0 8px 0;\n  position: relative;\n  max-width: 100%;\n  word-wrap: break-word;\n`;\n\nconst EditButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  top: 5px;\n  opacity: 0.5;\n  ${CardContainer}:hover & {\n    display: block;\n    color: #01df01;\n    cursor: pointer;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst DeleteButton = styled(Icon)`\n  position: absolute;\n  display: none;\n  right: 5px;\n  bottom: 5px;\n  opacity: 0.5;\n  ${CardContainer}:hover & {\n    display: block;\n    color: #df013a;\n    cursor: pointer;\n  }\n  &:hover {\n    opacity: 0.8;\n  }\n`;\nfunction TrelloCard({ text, id, index, listID }) {\n  console.log(listID);\n  console.log(id);\n  const dispatch = useDispatch();\n  const [edit, setEdit] = useState(false);\n  const [cardText, setText] = useState(text);\n  console.log(cardText);\n  const closeForm = e => {\n    setEdit(false);\n  };\n  const handleChange = e => {\n    setText(e.target.value);\n  };\n  const saveCard = e => {\n    e.preventDefault();\n    dispatch(editCard(id, listID, cardText));\n    setEdit(false);\n  };\n  const handleDeleteCard = e => {\n    dispatch(deleteCard(id, listID));\n  };\n  const renderEditForm = () => {\n    return (\n      <TrelloForm\n        text={cardText}\n        onChange={e => handleChange(e)}\n        closeForm={e => closeForm(e)}\n      >\n        <TrelloButton onClick={e => saveCard(e)}>save</TrelloButton>\n      </TrelloForm>\n    );\n  };\n  const renderCard = () => {\n    return (\n      <Draggable draggableId={String(id)} index={index}>\n        {porvided => (\n          <CardContainer\n            {...porvided.draggableProps}\n            {...porvided.dragHandleProps}\n            ref={porvided.innerRef}\n          >\n            <Card>\n              {cardText && (\n                <EditButton onMouseDown={() => setEdit(true)} fontSize=\"small\">\n                  edit\n                </EditButton>\n              )}\n\n              <DeleteButton fontSize=\"small\" onMouseDown={handleDeleteCard}>\n                delete\n              </DeleteButton>\n              <CardContent>\n                <Typography>{text}</Typography>\n              </CardContent>\n            </Card>\n          </CardContainer>\n        )}\n      </Draggable>\n    );\n  };\n  console.log(text);\n  console.log(id);\n\n  return edit ? renderEditForm() : renderCard();\n}\nexport default TrelloCard;\n","import uuid from \"uuid/v4\";\nconst ADD_CARD = \"ADD_CARD\";\nconst ADD_LIST = \"ADD_LIST\";\nconst DRAG_HAPPENED = \"DRAG_HAPPENED\";\nconst DELETE_CARD = \"DELETE_CARD\";\n\nexport const addList = title => {\n  const id = uuid();\n  return { type: ADD_LIST, payload: { title, id } };\n};\nexport const deleteCard = (id, listID) => {\n  return {\n    type: DELETE_CARD,\n    payload: { id, listID }\n  };\n};\nconst initialState = {\n  \"0리스트\": {\n    id: \"0리스트\",\n    title: \"myList\",\n    cards: [\"0카드\"]\n  }\n};\nexport const sort = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  type\n) => ({\n  type: DRAG_HAPPENED,\n  payload: {\n    droppableIdStart,\n    droppableIdEnd,\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggableId,\n    type\n  }\n});\n\nexport default function listReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_LIST: {\n      const { title, id } = action.payload;\n      const newList = {\n        id: `${id}리스트`,\n        title: title,\n        cards: []\n      };\n      const newState = { ...state, [`${id}리스트`]: newList };\n      return newState;\n    }\n    case ADD_CARD:\n      const { listID, id } = action.payload;\n      const list = state[listID];\n      list.cards.push(`${id}카드`);\n      return { ...state, [listID]: list };\n\n    case DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexEnd,\n        droppableIndexStart,\n        type\n      } = action.payload;\n      if (type === \"list\") {\n        return state;\n      }\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state[droppableIdStart];\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n        return { ...state, [droppableIdStart]: list };\n      }\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state[droppableIdStart];\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state[droppableIdEnd];\n\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n        return {\n          ...state,\n          [droppableIdStart]: listStart,\n          [droppableIdEnd]: listEnd\n        };\n      }\n      return state;\n    case DELETE_CARD: {\n      const { listID, id } = action.payload;\n\n      const list = state[listID];\n\n      const newCards = list.cards.filter(cardID => cardID !== id);\n      return { ...state, [listID]: { ...list, cards: newCards } };\n    }\n    default:\n      return state;\n  }\n}\n\n/*\nlet listID = 1;\nlet cardID = 2;\nconst initialState = [\n  {\n    title: \"어제 못한것들\",\n    id: `리스트번호${0}`,\n    cards: [\n      {\n        id: `카드번호${0}`,\n        text: \"코테준비\"\n      },\n      {\n        id: `카드번호${1}`,\n        text: \"포폴 관리 \"\n      }\n    ]\n  }\n];\n\nexport default function listRedcuer(state = initialState, action) {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `리스트번호${listID}`\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD:\n      const newCard = {\n        text: action.payload.text,\n        id: `카드번호${cardID}`\n      };\n      cardID += 1;\n      const newState = state.map(list => {\n        if (list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard]\n          };\n        } else {\n          return list;\n        }\n      });\n      return newState;\n\n    // edit\n    case CONSTANTS.EDIT_CARD: {\n      const { id, cardText, listID } = action.payload;\n\n      /*\n      id: \"카드번호2\"\n      listID: \"리스트번호1\"\n      cardText: \"하드코딩한것 깔끔하게 고치기 css부분 스타일드 컴포\n       /\n      const list = state.find(list => list.id === action.payload.listID);\n      //const card = list.cards.find(id => id.id === editCard.id);\n\n      // const editcard = { ...card, id: id, text: cardText };\n\n      // console.log(editcard);\n      // console.log(card);\n      console.log(listID);\n      console.log(list.id);\n      const card = { id: id, text: cardText };\n      const update = list.cards.map(\n        list => (list.id === listID ? { ...list, text: cardText } : list)\n\n        /* if (list) {\n          const update2 = list.cards.findIndex(function(item) {\n            return item.id === action.payload.id;\n          });\n          if (update2 > -1) {\n            list.cards.splice(update2, 1);\n          }\n          return {\n            ...list,\n            cards: list.cards.concat(card)\n          };\n        }\n      });\n\n      /*\n      const update2 = list.cards.findIndex(function(item) {\n        return item.id === action.payload.id;\n      });\n      if (update2 > -1) {\n        list.cards.splice(update2, 1);\n      }/\n      );\n      console.log(update);\n      return update;\n    }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type\n      } = action.payload;\n      const newStat = [...state];\n\n      //리스트 주변을 드래깅\n      if (type === \"list\") {\n        const list = newStat.splice(droppableIndexStart, 1);\n        newStat.splice(droppableIndexEnd, 0, ...list);\n        return newStat;\n      }\n      //같은 리스트 안에서\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find(list => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n      //다른 리스트\n      if (droppableIdStart !== droppableIdEnd) {\n        const listStart = state.find(list => droppableIdStart === list.id);\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n        const listEnd = state.find(list => droppableIdEnd === list.id);\n\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newStat;\n\n    default:\n      return state;\n  }\n}\n\n\n*/\n","import React from \"react\";\nimport Icon from \"@material-ui/core/Icon\";\nimport styled from \"styled-components\";\n\nconst TrelloOpenForm = ({ list, children, onClick }) => {\n  const buttonTextOpacity = list ? 1 : 0.5;\n  const buttonTextColor = list ? \"white\" : \"inherit\";\n  const buttonTextBackground = list ? \"rgba(0,0,0,.15)\" : \"inherit\";\n\n  const OpenFormButton = styled.div`\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    border-radius: 3px;\n    height: 36px;\n    margin-left: 8px;\n    width: 300px;\n    padding-left: 10px;\n    padding-right: 10px;\n    opacity: ${buttonTextOpacity};\n    color: ${buttonTextColor};\n    background-color: ${buttonTextBackground};\n  `;\n\n  return (\n    <OpenFormButton onClick={onClick}>\n      <Icon>add</Icon>\n      {children}\n    </OpenFormButton>\n  );\n};\n\nexport default TrelloOpenForm;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { addCard } from \"../modules/cardReducer\";\nimport { addList } from \"../modules/listReducer\";\nimport styled from \"styled-components\";\nimport Icon from \"@material-ui/core/Icon\";\nimport TrelloForm from \"./TrelloForm\";\nimport TrelloButton from \"./TrelloButton\";\nimport TrelloOpenForm from \"./TrelloOpenForm\";\n\nfunction TrelloAdd(props) {\n  console.log(props);\n  const { listID, list } = props;\n\n  const dispatch = useDispatch();\n  const [state, setState] = useState({\n    formOpen: false,\n    text: \"\"\n  });\n\n  const openForm = () => {\n    setState({\n      ...state,\n      formOpen: true\n    });\n  };\n\n  const closeForm = () => {\n    setState({ formOpen: false });\n  };\n\n  const handleInputChange = e => {\n    setState({\n      ...state,\n      text: e.target.value\n    });\n  };\n  const handleAddList = () => {\n    if (state.text) {\n      setState({ text: \"\" });\n    }\n    dispatch(addList(state.text));\n  };\n\n  const handleAddCard = () => {\n    if (state.text) {\n      setState({ text: \"\" });\n    }\n    dispatch(addCard(listID, state.text));\n  };\n\n  return state.formOpen ? (\n    <TrelloForm\n      list={list}\n      text={state.text}\n      onChange={e => handleInputChange(e)}\n      closeForm={closeForm}\n    >\n      <TrelloButton onClick={list ? handleAddList : handleAddCard}>\n        {list ? \"add list\" : \"add card\"}\n      </TrelloButton>\n    </TrelloForm>\n  ) : (\n    <TrelloOpenForm list={list} onClick={openForm}>\n      {list ? \"리스트 추가\" : \"카드 추가\"}\n    </TrelloOpenForm>\n  );\n}\n\nexport default TrelloAdd;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TrelloCard from \"../components/TrelloCard\";\nimport { useSelector } from \"react-redux\";\nimport TrelloAdd from \"./TrelloAdd\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { useState } from \"react\";\n\nconst ListContainer = styled.div`\n  background-color: #dfe3e6;\n  border-radius: 3px;\n  width: 300px;\n  padding: 8px;\n  height: 100%;\n  margin: 0 8px 0 0;\n`;\nconst StyledInput = styled.input`\n  width: 100%;\n  border: none;\n  outline-color: blue;\n  border-radius: 3px;\n  margin-bottom: 3px;\n  padding: 5px;\n`;\nconst TitleContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n`;\nconst ListTitle = styled.h4`\n  transition: 0.3s ease-in;\n  ${TitleContainer}:hover & {\n    background: #ccc;\n  }\n`;\n\nfunction TrelloList({ title, cards, listID, list, index }) {\n  return (\n    <Draggable draggableId={String(listID)} index={index}>\n      {provided => (\n        <ListContainer\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <Droppable droppableId={String(listID)} type=\"card\">\n            {provided => (\n              <div>\n                <TitleContainer>\n                  <ListTitle> {title}</ListTitle>\n                </TitleContainer>\n                <div {...provided.droppableProps} ref={provided.innerRef}>\n                  {cards.map((card, index) => {\n                    return (\n                      <TrelloCard\n                        //카드에는 텍스트 아이디 리스트\n                        text={card.text}\n                        key={card.id}\n                        id={card.id}\n                        index={index}\n                        listID={listID}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                  <TrelloAdd listID={listID} />\n                </div>\n              </div>\n            )}\n          </Droppable>\n        </ListContainer>\n      )}\n    </Draggable>\n  );\n}\nexport default TrelloList;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TrelloList from \"../components/TrelloList\";\nimport styled from \"styled-components\";\nimport TrelloAdd from \"../components/TrelloAdd\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { sort } from \"../modules/listReducer\";\n\nconst ListsContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nfunction TrelloListContainer() {\n  const lists = useSelector(state => state.lists);\n  const origin = useSelector(state => state.origin);\n\n  const cards = useSelector(state => state.cards);\n  const dispatch = useDispatch();\n  const onDragEnd = result => {\n    const { destination, source, draggableId, type } = result;\n    if (!destination) {\n      return;\n    }\n    dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n  console.log(lists);\n  return (\n    <div>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n          {provided => (\n            <ListsContainer\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {origin.map((listID, index) => {\n                const list = lists[listID];\n                if (list) {\n                  const listCards = list.cards.map(cardID => cards[cardID]);\n\n                  return (\n                    <TrelloList\n                      list={list}\n                      listID={list.id}\n                      title={list.title}\n                      key={list.id}\n                      cards={listCards}\n                      index={index}\n                    />\n                  );\n                }\n              })}\n              {provided.placeholder}\n              <TrelloAdd list />\n            </ListsContainer>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\nexport default TrelloListContainer;\n","import React from \"react\";\nimport TrelloListContainer from \"./container/TrelloListContainer\";\n\nfunction App() {\n  return <TrelloListContainer />;\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = [\"0리스트\"];\n\nconst ADD_LIST = \"ADD_LIST\";\nconst DRAG_HAPPENED = \"DRAG_HAPPENED\";\nexport default function originReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_LIST: {\n      return [...state, `${action.payload.id}리스트`];\n    }\n    case DRAG_HAPPENED:\n      const { droppableIndexStart, droppableIndexEnd, type } = action.payload;\n      const newState = [...state];\n      if (type === \"list\") {\n        const pullList = newState.splice(droppableIndexStart, 1);\n        newState.splice(droppableIndexEnd, 0, ...pullList);\n        return newState;\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport listRedcuer from \"./listReducer\";\nimport cardReducer from \"./cardReducer\";\nimport originReducer from \"./originReducers\";\n\nconst rootReducer = combineReducers({\n  origin: originReducer,\n  lists: listRedcuer,\n  cards: cardReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../modules/index\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport logger from \"redux-logger\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\nconst enhancedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function configureStore() {\n  const store = createStore(enhancedReducer, applyMiddleware(logger));\n  const persistor = persistStore(store);\n  return { store, persistor };\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/es/integration/react\";\nimport configureStore from \"./store\";\nimport rootReducer from \"./modules\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\n\nconst store = createStore(rootReducer, applyMiddleware(logger));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}